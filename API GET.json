{
    "status": true,
    "message": "tmp Data found successfully",
    "data": {
        "id": 1,
        "created_at": "2025-03-08T06:26:38.000000Z",
        "updated_at": "2025-03-08T06:26:38.000000Z",
        "serial_no": "213123",
        "date": "2025-03-05",
        "code_no": "1",
        "order_no": "12345",
        "type": "example_type",
        "press_1": "value_1",
        "press_2": "value_2",
        "machine_no": "machine_1",
        "sintering_furnace_no": "furnace_1",
        "furnace_no": "furnace_2",
        "zone": "zone_1",
        "pass_no": "pass_1",
        "Br": "value",
        "4paiId": "value",
        "iHc": "value",
        "bHc": "value",
        "BHMax": "value",
        "Squareness": "fuck",
        "4paiIs": "value",
        "iHk": "test",
        "4paiIa": "value",
        "Density": "value",
        "iHkiHc": "value",
        "Br4pai": "value",
        "iHr95": "value",
        "iHr98": "value",
        "Tracer": "value",
        "HRX": "value",
        "MRX": "value",
        "HRY": "value",
        "MRY": "value",
        "IHKA": "value",
        "MRA": "value",
        "IHKB": "value",
        "MRB": "value",
        "IHKC": "value",
        "MRC": "value",
        "HR": "value",
        "HRO": "value",
        "x": [
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ],
        "y": [
            2,
            2,
            2,
            2,
            2,
            2
        ],
        "remark": {
            "id": 1,
            "created_at": "2025-03-08T06:26:38.000000Z",
            "updated_at": "2025-03-08T06:26:38.000000Z",
            "tpm_data_id": 1,
            "Br_remarks": "remarks_example",
            "4paiId_remarks": "remarks_example",
            "iHc_remarks": "remarks_example",
            "bHc_remarks": "value",
            "BHMax_remarks": "value",
            "Squareness_remarks": "value",
            "4paiIs_remarks": "value",
            "iHk_remarks": "value",
            "4paiIa_remarks": "value",
            "Density_remarks": "value",
            "iHkiHc_remarks": "value",
            "Br4pai_remarks": "value",
            "iHr95_remarks": "value",
            "iHr98_remarks": "value",
            "Tracer_remarks": "value",
            "HRX_remarks": "value",
            "MRX_remarks": "value",
            "HRY_remarks": "value",
            "MRY_remarks": "value",
            "IHKA_remarks": "value",
            "MRA_remarks": "value",
            "IHKB_remarks": "value",
            "MRB_remarks": "value",
            "IHKC_remarks": "value",
            "MRC_remarks": "value",
            "HR_remarks": "value",
            "HRO_remarks": "value"
        },
        "aggregate_functions": {
            "id": 1,
            "created_at": "2025-03-08T06:26:38.000000Z",
            "updated_at": "2025-03-08T06:26:38.000000Z",
            "tpm_data_id": 1,
            "average": {
                "Br": "value",
                "bHc": "value",
                "iHc": "value",
                "iHk": "test",
                "Hr95": "test",
                "Hr98": "test",
                "BHMax": "value",
                "4paila": "test",
                "4paild": "test",
                "4pails": "test",
                "Br4pai": "value",
                "iHciHk": "test",
                "Squareness": "fuck"
            },
            "maximum": {
                "Br": "value",
                "bHc": "value",
                "iHc": "value",
                "iHk": "test",
                "Hr95": "test",
                "Hr98": "test",
                "BHMax": "value",
                "4paila": "test",
                "4paild": "test",
                "4pails": "test",
                "Br4pai": "value",
                "iHciHk": "test",
                "Squareness": "fuck"
            },
            "minimum": {
                "Br": "value",
                "bHc": "value",
                "iHc": "value",
                "iHk": "test",
                "Hr95": "test",
                "Hr98": "test",
                "BHMax": "value",
                "4paila": "test",
                "4paild": "test",
                "4pails": "test",
                "Br4pai": "value",
                "iHciHk": "test",
                "Squareness": "fuck"
            },
            "ng_counter": {
                "Br": "value",
                "bHc": "value",
                "iHc": "value",
                "iHk": "test",
                "Hr95": "test",
                "Hr98": "test",
                "BHMax": "value",
                "4paila": "test",
                "4paild": "test",
                "4pails": "test",
                "Br4pai": "value",
                "iHciHk": "test",
                "Squareness": "fuck"
            }
        }
    }
}

/*
<template>
  <div class="p-6 max-w-md mx-auto bg-white shadow-lg rounded-lg">
    <h2 class="text-xl font-semibold mb-4">User Input</h2>

    <!-- Name Input -->
    <div class="mb-4">
      <label class="block text-gray-600">Name:</label>
      <input v-model="formData.name" type="text"
        class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none">
    </div>

    <!-- Email Input -->
    <div class="mb-4">
      <label class="block text-gray-600">Email:</label>
      <input v-model="formData.email" type="email"
        class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none">
    </div>

    <!-- Submit Button -->
    <button @click="submitData"
      class="px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition">
      Send Data
    </button>

    <!-- API Response -->
    <div v-if="responseMessage" class="mt-4 p-4 bg-green-100 rounded-lg">
      <h3 class="font-semibold">Response:</h3>
      <p>{{ responseMessage }}</p>
    </div>
  </div>
</template>

<script setup>
import { ref } from "vue";
import axios from "axios";

// Reactive state for user input
const formData = ref({
  name: "",
  email: ""
});

// API response message
const responseMessage = ref("");

// Function to send data using Axios
const submitData = async () => {
  try {
    const response = await axios.post("https://jsonplaceholder.typicode.com/posts", formData.value);

    // Handle response
    responseMessage.value = "Data submitted successfully!";
    console.log("API Response:", response.data);
  } catch (error) {
    responseMessage.value = "Error submitting data!";
    console.error("API Error:", error);
  }
};
</scrip>
*/
